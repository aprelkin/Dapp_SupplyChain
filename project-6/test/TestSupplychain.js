// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
//const web3 = require("truffle-hdwallet-provider");
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether");
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Harvested()
        var event = supplyChain.Harvested()
        event.on("data", () => {
            eventEmitted = true;
        });


        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        let eventEmitted = false;


        // Watch the emitted event Processed()
        const event = supplyChain.Processed();
        event.on("data", () => {
            eventEmitted = true;
        });


        const farmerAddress = accounts[1]
        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc, {from: farmerAddress})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = await supplyChain.fetchItemBufferOne.call(upc);
        const item2 = await supplyChain.fetchItemBufferTwo.call(upc);


        // Verify the result set

        assert.equal(item2[5], 1, "Item state is not Processed");
        assert.equal(eventEmitted, true, "Processed event not emitted");
        assert.equal(item[2], farmerAddress, "Incorrect owner after processing");
        assert.equal(item2[6], 0x0, "Distributor ID is not empty");
        assert.equal(item2[7], 0x0, "Retailer ID is not empty");
        assert.equal(item2[8], 0x0, "Consumer ID is not empty");
    })

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Packed()


        // Mark an item as Packed by calling function packItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

        const farmerAddress = accounts[1]

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Packed()
        const event = supplyChain.Packed();
        event.on("data", () => {
            eventEmitted = true;
        });


        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, {from: farmerAddress});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = await supplyChain.fetchItemBufferOne.call(upc);
        const item2 = await supplyChain.fetchItemBufferTwo.call(upc);
        // Verify the result set
        assert.equal(item2[5], 2, "Item state is not Packed");
        assert.equal(eventEmitted, true, "Packed event not emitted");

    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event ForSale()


        // Mark an item as ForSale by calling function sellItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set
        const farmerAddress = accounts[1]


        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event ForSale()
        const event = supplyChain.ForSale();
        event.on("data", () => {
            eventEmitted = true;
        });

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, productPrice, {from: farmerAddress});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = await supplyChain.fetchItemBufferOne.call(upc);
        const item2 = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(item2[5], 3, "Item state is not ForSale");
        assert.equal(item2[4], productPrice, "Incorrect product price");
        assert.equal(eventEmitted, true, "ForSale event not emitted");

    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Sold()
        var event = supplyChain.Sold()

        const distributorAddress = accounts[2]

        // Mark an item as Sold by calling function buyItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

        // Declare and Initialize a variable for event


        // Watch the emitted event Sold()
        event.on("data", () => {
            eventEmitted = true;
        });


        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, {from: distributorAddress, value: productPrice});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = await supplyChain.fetchItemBufferOne.call(upc);
        const item2 = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(item2[5], 4, "Item state is not Sold");
        assert.equal(item2[6], distributorAddress, "Incorrect distributor ID");
        assert.equal(eventEmitted, true, "Sold event not emitted");
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Shipped()


        // Mark an item as Sold by calling function shipItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()

        const distributorAddress = accounts[2]
        // Verify the result set

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Shipped()
        const event = supplyChain.Shipped();
        event.on("data", () => {
            eventEmitted = true;
        });

        // Mark an item as Shipped by calling function shipItem()
        await supplyChain.shipItem(upc, {from: distributorAddress});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = await supplyChain.fetchItemBufferOne.call(upc);
        const item2 = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(item2[5], 5, "Item state is not Shipped");
        assert.equal(eventEmitted, true, "Shipped event not emitted");
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Received()


        // Mark an item as Sold by calling function receiveItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const retailerAddress = accounts[3]

        // Verify the result set

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Received()
        const event = supplyChain.Received();
        event.on("data", () => {
            eventEmitted = true;
        });

        // Mark an item as Received by calling function receiveItem()
        await supplyChain.receiveItem(upc, {from: retailerAddress});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = await supplyChain.fetchItemBufferOne.call(upc);
        const item2 = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(item2[5], 6, "Item state is not Received");
        assert.equal(eventEmitted, true, "Received event not emitted");
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Purchased()


        // Mark an item as Sold by calling function purchaseItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()

        const consumerAddress = accounts[4];
        // Verify the result set
        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Purchased()
        const event = supplyChain.Purchased();
        event.on("data", () => {
            eventEmitted = true;
        });


        // Mark an item as Purchased by calling function purchaseItem()
        await supplyChain.purchaseItem(upc, {from: consumerAddress});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = await supplyChain.fetchItemBufferOne.call(upc);
        const item2 = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(item2[5], 7, "Item state is not Purchased");
        assert.equal(item2[8], consumerAddress, "Consumer ID is not set correctly");
        assert.equal(eventEmitted, true, "Purchased event not emitted");
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()

        const ownerAddress = accounts[0];
        const farmerAddress = accounts[1];
        const consumerAddress = accounts[4];

        // Verify the result set:

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = await supplyChain.fetchItemBufferOne.call(upc);

        // Verify the result set
        assert.equal(item[0], sku, "SKU does not match");
        assert.equal(item[1], upc, "UPC does not match");
        assert.equal(item[2], consumerAddress, "Owner ID does not match");
        assert.equal(item[3], farmerAddress, "Origin Farmer ID does not match");
        assert.equal(item[4], originFarmName, "Origin Farm Name does not match");
        assert.equal(item[5], originFarmInformation, "Origin Farm Information does not match");
        assert.equal(item[6], originFarmLatitude, "Origin Farm Latitude does not match");
        assert.equal(item[7], originFarmLongitude, "Origin Farm Longitude does not match");


    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()

        const distributorAddress = accounts[2]
        const retailerAddress = accounts[3]
        const consumerAddress = accounts[4]

        // Verify the result set:

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = await supplyChain.fetchItemBufferOne.call(upc);
        const item2 = await supplyChain.fetchItemBufferTwo.call(upc);


        // Verify the result set
        assert.equal(item2[3], productNotes, "Product Notes do not match");
        assert.equal(item2[4], productPrice, "Product Price does not match");
        assert.equal(item2[5], 7, "Item State does not match");
        assert.equal(item2[6], distributorAddress, "Distributor ID does not match");
        assert.equal(item2[7], retailerAddress, "Retailer ID does not match");
        assert.equal(item2[8], consumerAddress, "Consumer ID does not match");


    })

});

